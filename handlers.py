import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes
from database import DatabaseManager
from text_parser import TextParser
from speech_recognition import SpeechRecognizer
from report_generator import ReportGenerator

class WorkoutHandlers:
    def __init__(self):
        self.db = DatabaseManager()
        self.parser = TextParser()
        self.speech_recognizer = SpeechRecognizer()
        self.report_generator = ReportGenerator()

        self.keyboard = ReplyKeyboardMarkup([
            [KeyboardButton("üèÅ –°—Ç–∞—Ä—Ç —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è"), KeyboardButton("‚èπÔ∏è –°—Ç–æ–ø —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è")],
            [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞")]
        ], resize_keyboard=True)

    def get_formatted_exercises_list(self):
        exercises = self.db.get_all_exercises()
        formatted_list = '\n‚Ä¢ ' + '\n‚Ä¢ '.join(ex.capitalize() for ex in exercises)
        return f"üìã –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤–ø—Ä–∞–≤:{formatted_list}"

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        self.db.add_user(
            telegram_id=user.id,
            username=user.username,
            first_name=user.first_name
        )

        welcome_text = (
            "üèãÔ∏è‚Äç‚ôÇÔ∏è –ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —â–æ–¥–µ–Ω–Ω–∏–∫ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å!\n\n"
            "–©–æ —è –≤–º—ñ—é:\n"
            "‚Ä¢ –ó–∞–ø–∏—Å—É–≤–∞—Ç–∏ —Ç–≤–æ—ó —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è\n"
            "‚Ä¢ –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞—Ç–∏ –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é\n"
            "‚Ä¢ –°—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—ñ –∑–≤—ñ—Ç–∏\n\n"
            "–©–æ–± –ø–æ—á–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è, –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É 'üèÅ –°—Ç–∞—Ä—Ç —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è'"
        )
        await update.message.reply_text(welcome_text, reply_markup=self.keyboard)

    async def start_workout(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        user_id = self.db.add_user(telegram_id=user.id)

        if self.db.get_active_workout(user_id):
            await update.message.reply_text(
                "‚ö° –£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è!\n"
                "–ì–æ–≤–æ—Ä—ñ—Ç—å –∞–±–æ –ø–∏—à—ñ—Ç—å –≤–ø—Ä–∞–≤–∏, –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚èπÔ∏è –°—Ç–æ–ø —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è."
            )
            return

        workout_id = self.db.start_workout(user_id)
        context.user_data['workout_id'] = workout_id

        
        exercises_list = self.get_formatted_exercises_list()
        
        await update.message.reply_text(
            "üèÅ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —Ä–æ–∑–ø–æ—á–∞—Ç–æ!\n\n"
            "–¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –≤–ø—Ä–∞–≤–∏:\n"
            "–ü—Ä–∏–∫–ª–∞–¥–∏ –≤–≤–æ–¥—É:\n"
            "'–í—ñ–¥–∂–∏–º–∞–Ω–Ω—è, 15 —Ä–∞–∑—ñ–≤, 1 –ø—ñ–¥—Ö—ñ–¥'\n"
            "'–í—ñ–¥–∂–∏–º–∞–Ω–Ω—è 15 —Ä–∞–∑—ñ–≤, –ø–µ—Ä—à–∏–π –ø—ñ–¥—Ö—ñ–¥'\n\n"
            f"{exercises_list}\n\n"
            "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚èπÔ∏è –°—Ç–æ–ø —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è'"
        )

    async def stop_workout(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        user_id = self.db.add_user(telegram_id=user.id)

        workout_id = self.db.get_active_workout(user_id)
        if not workout_id:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.\n–°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üèÅ –°—Ç–∞—Ä—Ç —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è'")
            return

        workout_data = self.db.finish_workout(workout_id)
        context.user_data.pop('workout_id', None)

        report = self.report_generator.generate_workout_report(workout_data)
        await update.message.reply_text(report)

    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        user_id = self.db.add_user(telegram_id=user.id)

        workout_id = self.db.get_active_workout(user_id)
        if not workout_id:
            await update.message.reply_text("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É —Ä–æ–∑–ø–æ—á–Ω—ñ—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ 'üèÅ –°—Ç–∞—Ä—Ç —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è'")
            return

        exercise_data = self.parser.parse_exercise_input(update.message.text)
        if not exercise_data:
            await update.message.reply_text(
                "‚ùå –ù–µ –º–æ–∂—É —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –≤–ø—Ä–∞–≤—É.\n\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
                "'–í–∏–∫–æ–Ω–∞–≤(-–ª–∞) –≤—ñ–¥–∂–∏–º–∞–Ω–Ω—è, 15 —Ä–∞–∑—ñ–≤, 1 –ø—ñ–¥—Ö—ñ–¥'\n"
                "'–ñ–∏–º –ª–µ–∂–∞—á–∏, 12 —Ä–∞–∑—ñ–≤, –¥—Ä—É–≥–∏–π –ø—ñ–¥—Ö—ñ–¥, 80 –∫–≥'"
            )
            return

        try:
            self.db.add_set(
                workout_id=workout_id,
                exercise_name=exercise_data['exercise'],
                reps=exercise_data['reps'],
                weight=exercise_data.get('weight'),
                set_number=exercise_data.get('set_number')
            )
            confirmation = self.report_generator.format_exercise_confirmation(exercise_data)
            await update.message.reply_text(confirmation)

        except ValueError as e:
            exercises_list = self.get_formatted_exercises_list()
            await update.message.reply_text(f"{str(e)}\n\n{exercises_list}")

    async def handle_voice_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        user_id = self.db.add_user(telegram_id=user.id)

        workout_id = self.db.get_active_workout(user_id)
        if not workout_id:
            await update.message.reply_text("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É —Ä–æ–∑–ø–æ—á–Ω—ñ—Ç—å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ 'üèÅ –°—Ç–∞—Ä—Ç —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è'")
            return

        processing_msg = await update.message.reply_text("üé§ –û–±—Ä–æ–±–ª—è—é –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")

        try:
            voice_file = await update.message.voice.get_file()
            ogg_bytes = await voice_file.download_as_bytearray()

            text = self.speech_recognizer.transcribe_audio_sync(ogg_bytes)
            await processing_msg.delete()

            if not text:
                await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç–∏ —á—ñ—Ç–∫—ñ—à–µ.")
                return

            await update.message.reply_text(f"üëÇ –Ø –ø–æ—á—É–≤: \"{text}\"")

            exercise_data = self.parser.parse_exercise_input(text)
            if not exercise_data:
                await update.message.reply_text(
                    "‚ùå –ù–µ –º–æ–∂—É —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –≤–ø—Ä–∞–≤—É –∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n\n"
                    "–°–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞–∑–∞—Ç–∏ —Ç–∞–∫:\n"
                    "‚Ä¢ '–ó—Ä–æ–±–∏–≤(-–ª–∞) –≤—ñ–¥–∂–∏–º–∞–Ω–Ω—è 15 —Ä–∞–∑—ñ–≤, –ø–µ—Ä—à–∏–π –ø—ñ–¥—Ö—ñ–¥'\n"
                    "‚Ä¢ '–ñ–∏–º –ª–µ–∂–∞—á–∏ 12 —Ä–∞–∑—ñ–≤, –¥—Ä—É–≥–∏–π –ø—ñ–¥—Ö—ñ–¥, 80 –∫—ñ–ª–æ–≥—Ä–∞–º'"
                )
                return

            try:
                self.db.add_set(
                    workout_id=workout_id,
                    exercise_name=exercise_data['exercise'],
                    reps=exercise_data['reps'],
                    weight=exercise_data.get('weight'),
                    set_number=exercise_data.get('set_number')
                )

                confirmation = self.report_generator.format_exercise_confirmation(exercise_data)
                await update.message.reply_text(confirmation)

            except ValueError as e:
                exercises_list = self.get_formatted_exercises_list()
                await update.message.reply_text(f"{str(e)}\n\n{exercises_list}")

        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≥–æ–ª–æ—Å—É: {e}", exc_info=True)
            try:
                await processing_msg.delete()
            except:
                pass
            await update.message.reply_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")


    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        
        exercises_list = self.get_formatted_exercises_list()
        
        help_text = (
            "üèãÔ∏è‚Äç‚ôÇÔ∏è **–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º:**\n\n"
            "1Ô∏è‚É£ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'üèÅ –°—Ç–∞—Ä—Ç —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è'\n"
            "2Ô∏è‚É£ –î–æ–¥–∞–≤–∞–π—Ç–µ –≤–ø—Ä–∞–≤–∏ —Ç–µ–∫—Å—Ç–æ–º –∞–±–æ –≥–æ–ª–æ—Å–æ–º:\n\n"
            "üìù **–¢–µ–∫—Å—Ç–æ–≤—ñ –ø—Ä–∏–∫–ª–∞–¥–∏:**\n"
            "‚Ä¢ –í—ñ–¥–∂–∏–º–∞–Ω–Ω—è, 15 —Ä–∞–∑—ñ–≤, 1 –ø—ñ–¥—Ö—ñ–¥\n"
            "‚Ä¢ –í–∏–∫–æ–Ω–∞–≤ –∂–∏–º –ª–µ–∂–∞—á–∏, 12 —Ä–∞–∑—ñ–≤, –¥—Ä—É–≥–∏–π –ø—ñ–¥—Ö—ñ–¥, 80 –∫–≥\n"
            "‚Ä¢ –ü—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è, 20 —Ä–∞–∑—ñ–≤, —Ç—Ä–µ—Ç—ñ–π –ø—ñ–¥—Ö—ñ–¥\n\n"
            "üé§ **–ì–æ–ª–æ—Å–æ–≤—ñ –ø—Ä–∏–∫–ª–∞–¥–∏:**\n"
            "‚Ä¢ '–ó—Ä–æ–±–∏–≤(-–ª–∞) –≤—ñ–¥–∂–∏–º–∞–Ω–Ω—è 15 —Ä–∞–∑—ñ–≤, –ø–µ—Ä—à–∏–π –ø—ñ–¥—Ö—ñ–¥'\n"
            "‚Ä¢ '–ñ–∏–º –ª–µ–∂–∞—á–∏ 12 —Ä–∞–∑—ñ–≤, –¥—Ä—É–≥–∏–π –ø—ñ–¥—Ö—ñ–¥, 80 –∫—ñ–ª–æ–≥—Ä–∞–º'\n\n"
            "3Ô∏è‚É£ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '‚èπÔ∏è –°—Ç–æ–ø —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è\n"
            "4Ô∏è‚É£ –û—Ç—Ä–∏–º–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç!\n\n"
            f"{exercises_list}\n\n"
            "üí° **–ü–æ—Ä–∞–¥–∏:**\n"
            "‚Ä¢ –ì–æ–≤–æ—Ä—ñ—Ç—å —á—ñ—Ç–∫–æ\n"
            "‚Ä¢ –í–∞–≥–∞ –Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–∞\n"
            "‚Ä¢ –ú–æ–∂–Ω–∞ –Ω–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏ –ø—ñ–¥—Ö—ñ–¥ ‚Äî –±–æ—Ç –ø–æ—Ä–∞—Ö—É—î —Å–∞–º"
        )
        await update.message.reply_text(help_text, parse_mode='Markdown')

    async def show_statistics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        user_id = self.db.add_user(telegram_id=user.id)

        stats = self.db.get_user_statistics(user_id)
        if not stats or stats['total_workouts'] == 0:
            await update.message.reply_text("üìä –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–Ω—å.\n–†–æ–∑–ø–æ—á–Ω—ñ—Ç—å –ø–µ—Ä—à–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è! üí™")
            return

        stats_text = (
            f"üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n"
            f"üèãÔ∏è‚Äç‚ôÇÔ∏è –í—Å—å–æ–≥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å: {stats['total_workouts']}\n"
            f"üí™ –í—Å—å–æ–≥–æ –ø—ñ–¥—Ö–æ–¥—ñ–≤: {stats['total_sets']}\n"
            f"üî• –í—Å—å–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω—å: {stats['total_reps']}\n"
            f"‚è±Ô∏è –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å: {stats['total_time']} —Ö–≤\n\n"
            f"üèÜ **–¢–æ–ø-3 –≤–ø—Ä–∞–≤–∏ –ø–æ –ø—ñ–¥—Ö–æ–¥–∞–º:**\n"
        )

        for i, (exercise, count) in enumerate(stats['top_exercises'], 1):
            stats_text += f"{i}. {exercise.capitalize()}: {count}\n"

        await update.message.reply_text(stats_text)

    async def handle_button_press(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text

        if text == "üèÅ –°—Ç–∞—Ä—Ç —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è":
            await self.start_workout(update, context)
        elif text == "‚èπÔ∏è –°—Ç–æ–ø —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è":
            await self.stop_workout(update, context)
        elif text == "‚ùì –î–æ–ø–æ–º–æ–≥–∞":
            await self.help_command(update, context)
        elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            await self.show_statistics(update, context)
        else:
            await self.handle_text_message(update, context)